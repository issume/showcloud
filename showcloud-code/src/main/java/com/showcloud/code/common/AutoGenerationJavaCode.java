package com.showcloud.code.common;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;

public class AutoGenerationJavaCode {
	private String url;
	private String name;
	private String passWord;
	private String driver;
	private String sql;
	private String tableName;
	private String templateDir;
	private String autoGeneratedFile;
	// 包的基础路径 比如com.xx等
	private String basePath;
	private static String[][] fileNameArray = new String[6][2];

	static {
		fileNameArray[0][0] = "entityTemplate.ftl";
		fileNameArray[0][1] = ".java";

		fileNameArray[1][0] = "serviceTemplate.ftl";
		fileNameArray[1][1] = "Service.java";

		fileNameArray[2][0] = "serviceImplTemplate.ftl";
		fileNameArray[2][1] = "ServiceImpl.java";

		fileNameArray[3][0] = "daoTemplate.ftl";
		fileNameArray[3][1] = "Dao.java";

		fileNameArray[4][0] = "daoImplTemplate.ftl";
		fileNameArray[4][1] = "DaoImpl.java";

		fileNameArray[5][0] = "mapperTemplate.ftl";
		fileNameArray[5][1] = "Mapper.xml";
	}

	public AutoGenerationJavaCode(String url, String name, String passWord, String driver, String tableName,  
	           String autoGeneratedFile,String basePath) {  
	        this.url = url;  
	        this.name = name;  
	        this.passWord = passWord;  
	        this.driver = driver;  
	        this.sql = "select * from " + tableName;  
	        this.tableName = tableName;  
	        this.templateDir = this.getClass().getResource("").getPath().replace("target/classes/com/xx/common/code/autocode/", "");  
	       
	        this.autoGeneratedFile = autoGeneratedFile;  
	        this.basePath=basePath;  
	    }

	public void autoGenerationJavaCode() throws IOException, TemplateException, ClassNotFoundException, SQLException {
		Configuration cfg = new Configuration();
		cfg.setDefaultEncoding("utf-8");

		String className = dealClassName(dealTableName());

		String fileName = className;
		// Map<String, Object> ColumnumnMap = getColumnumn();
		// 设置模板文件路径
		cfg.setDirectoryForTemplateLoading(new File(templateDir));

		Map<String, Object> rootMap = new HashMap<String, Object>();
		rootMap.put("className", className);
		// rootMap.put("ColumnumnMap", ColumnumnMap);
		rootMap.put("Columnumns", getColumnumnList());
		rootMap.put("basePath", basePath);

		for (int i = 0; i < fileNameArray.length; i++) {
			String packageName = null;
			String filePath = null;
			// 设定包名
			switch (fileNameArray[i][0]) {
				case "entityTemplate.ftl":
					packageName = basePath + ".entity";
					filePath = autoGeneratedFile + "/entity";
					break;
				case "daoTemplate.ftl":
					packageName = basePath + ".dao";
					filePath = autoGeneratedFile + "/dao";
					break;
				case "daoImplTemplate.ftl":
					packageName = basePath + ".dao.impl";
					filePath = autoGeneratedFile + "/dao/impl";
					break;
				case "serviceTemplate.ftl":
					packageName = basePath + ".service";
					filePath = autoGeneratedFile + "/service";
					break;
				case "serviceImplTemplate.ftl":
					packageName = basePath + ".service.impl";
					filePath = autoGeneratedFile + "/service/impl";
					break;
				case "mapper.ftl":
					packageName = basePath;
					filePath = autoGeneratedFile + "/mapper";
					rootMap.put("tableName", tableName);
					break;
			}
			rootMap.put("packageName", packageName);
			File dir = new File(filePath);
			// 检查目录是否存在，不存在则创建
			if (!dir.exists()) {
				dir.mkdir();
			}
			Template temp = cfg.getTemplate(fileNameArray[i][0]);

			File docFile = new File(filePath + "//" + fileName + fileNameArray[i][1]);

			Writer docout = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(docFile)));

			// 输出文件
			temp.process(rootMap, docout);
		}
		System.out.println("==============所有的文件已成功生成===============");

	}

	public List<Column> getColumnumnList() throws ClassNotFoundException, SQLException {
		Connection conn;
		PreparedStatement pStemt = null;
		Class.forName(driver);
		conn = DriverManager.getConnection(url, name, passWord);
		pStemt = conn.prepareStatement(sql);
		ResultSetMetaData rsmd = pStemt.getMetaData();

		List<Column> listColumnumn = new ArrayList<Column>();
		int size = rsmd.getColumnCount();
		for (int i = 0; i < size; i++) {
			// String ColumnumnName = dealColumnumnName(rsmd, i);
			Column Column = getColumnumnInfo(rsmd, i);
			if (i == size - 1) {
				Column.setHasNext(false);
			}

			listColumnumn.add(Column);
		}
		conn.close();
		return listColumnumn;
	}

	/**
	 * 获取列信息 需要设置多属性，该处生成mapper.xml的时候需要各种属性
	 * 
	 * @author hym
	 * @time 2017年7月20日下午7:48:39
	 * @param rsmd
	 * @param i
	 * @return
	 * @throws SQLException
	 */
	private Column getColumnumnInfo(ResultSetMetaData rsmd, int i) throws SQLException {
		String ColumnumnName = rsmd.getColumnName(i + 1).toLowerCase();
		String charAfterLine = String.valueOf(ColumnumnName.charAt((ColumnumnName.indexOf("_") + 1)));
		String convertedChar = charAfterLine.toUpperCase();
		String fieldName = ColumnumnName.replace("_" + charAfterLine, convertedChar);// 映射到类中的名称
		String Columnumntype = rsmd.getColumnTypeName(i + 1);// sql的列类型
		Type type = new Type(Columnumntype, Type.get(Columnumntype).getJavaType());
		Column Column = new Column(i, fieldName, type);
		Column.setMethodName(dealClassName(fieldName));
		Column.setName(ColumnumnName);// 表中的列名
		if (ColumnumnName.equalsIgnoreCase("id")) {
			Column.setPK("yes");
		}
		return Column;
	}

	/**
	 * 将表名转换为DMO的字段名，比如 operate_type 转换后为 operateType
	 * 
	 * @author hym
	 * @time 2017年7月22日下午4:22:14
	 * @param rsmd
	 * @param i
	 * @return
	 * @throws SQLException
	 */
	private String dealColumnumnName(ResultSetMetaData rsmd, int i) throws SQLException {
		String columnName = rsmd.getColumnName(i + 1).toLowerCase();
		String charAfterLine = String.valueOf(columnName.charAt((columnName.indexOf("_") + 1)));
		String convertedChar = charAfterLine.toUpperCase();
		columnName = columnName.replace("_" + charAfterLine, convertedChar);
		return columnName;
	}

	/**
	 * 将表名转换为类型类名 比如 operate_log 转换后为 OperateLog
	 * ,类名首字母应为大写，这里在freemarker的模板里直接转换
	 * 
	 * @author hym
	 * @time 2017年7月22日下午4:22:05
	 * @return
	 */
	private String dealTableName() {
		String className = tableName.toLowerCase().substring(tableName.indexOf("_") + 1);
		String charAfterLine = String.valueOf(className.charAt((className.indexOf("_") + 1)));
		String convertedChar = charAfterLine.toUpperCase();
		className = className.replace("_" + charAfterLine, convertedChar);
		return className;
	}

	public static void main(String[] args) {
		String tableName = "t_operate_table_test";
		String className = tableName.toLowerCase().substring(tableName.indexOf("_") + 1);
		String charAfterLine = String.valueOf(className.charAt((className.indexOf("_") + 1)));
		String convertedChar = charAfterLine.toUpperCase();
		className = className.replace("_" + charAfterLine, convertedChar);
	}

	/**
	 * 将类名转换为文件名，java公共类名与其文件名应该相同，这里将首字母转换为大写 如operateLog 转换后为 OperateLog
	 * 
	 * @author hym
	 * @time 2017年7月22日下午4:22:25
	 * @param className
	 * @return
	 */
	private String dealClassName(String className) {
		String first = className.substring(0, 1).toUpperCase();
		String rest = className.substring(1, className.length());
		String fileName = new StringBuffer(first).append(rest).toString();
		return fileName;
	}

}
